import org.jooq.codegen.GenerationTool

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.jooq:jooq-codegen:3.13.0'
		classpath 'org.postgresql:postgresql:42.2.10'
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.jooq:jooq:3.13.0'
	implementation 'org.postgresql:postgresql:42.2.10'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}
task generate {
	doLast {
		def writer = new StringWriter()
		def xml = new groovy.xml.MarkupBuilder(writer)
				.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.13.0.xsd') {
					jdbc() {
						driver('org.postgresql.Driver')
						url('jdbc:postgresql://localhost:5432/petHotel')
						user('pethotel')
						password('pethotel')
					}
					generator() {
						database([:]) {
							name 'org.jooq.meta.postgres.PostgresDatabase'
							inputSchema 'pethotel'
							includes '.*'
						}
						generate([:]) {
							pojos true
							daos true
						}
						target() {
							packageName('com.example.demo.db')
							directory('src/main/java')
						}
					}
				}
		GenerationTool.generate(writer.toString())
	}
}